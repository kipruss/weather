{"version":3,"sources":["components/Countries/constants.js","components/Countries/index.js","components/Countries/Countries.jsx","App.js","constants.js","index.js"],"names":["countriesList","countriesNames","NL","RS","US","GB","FR","DE","IT","PL","ES","PT","Countries","country","setCountry","countriesLabels","useMemo","labels","forEach","code","primary","secondary","selected","countries","customLabels","showOptionLabel","showSecondarySelectedLabel","fullWidth","onSelect","App","selectedCountry","localStorage","getItem","selectedCity","useState","city","setCity","temperature","setTemperature","className","setItem","onSubmit","event","preventDefault","url","process","fetch","then","response","json","data","t","main","temp","Number","isFinite","Math","round","console","error","getWeather","type","value","onChange","target","placeholder","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MAAaA,EAAgB,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,MAEvEC,EAAiB,CAC5BC,GAAI,cACJC,GAAI,SACJC,GAAI,MACJC,GAAI,gBACJC,GAAI,SACJC,GAAI,UACJC,GAAI,QACJC,GAAI,SACJC,GAAI,QACJC,GAAI,Y,OCVSC,ECGG,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,WACtBC,EAAkBC,mBAAQ,WAC9B,IAAMC,EAAS,GAMf,OAJAjB,EAAckB,SAAQ,SAACC,GACrBF,EAAOE,GAAQ,CAAEC,QAASD,EAAME,UAAWpB,EAAekB,OAGrDF,IACN,IAEH,OACE,cAAC,IAAD,CACEK,SAAUT,EACVU,UAAWvB,EACXwB,aAAcT,EACdU,iBAAiB,EACjBC,4BAA4B,EAC5BC,WAAW,EACXC,SAAUd,K,MC0DDe,MA7Ef,WACE,IAAMC,EAAkBC,aAAaC,QAAQ,YCNjB,KDOtBC,EAAeF,aAAaC,QAAQ,SAAW,GAFxC,EAIiBE,mBAASJ,GAJ1B,mBAINjB,EAJM,KAIGC,EAJH,OAKWoB,mBAASD,GALpB,mBAKNE,EALM,KAKAC,EALA,OAMyBF,mBAAS,MANlC,mBAMNG,EANM,KAMOC,EANP,KAgDb,OACE,qBAAKC,UAAU,iBAAf,SACE,sBAAKA,UAAU,oBAAf,UACE,sBAAKA,UAAU,YAAf,UACE,cAAC,EAAD,CAAW1B,QAASA,EAASC,WAtBT,SAACK,GAC3BY,aAAaS,QAAQ,UAAWrB,GAChCL,EAAWK,MAqBL,uBAAMoB,UAAU,OAAOE,SAdV,SAACC,GACpBA,EAAMC,iBACFR,EAjCa,WACjB,IACE,IAAMS,EAAG,2DAAuDT,EAAvD,YAA+DtB,EAA/D,+BAA6FgC,oCAEtGC,MAAMF,GACHG,MAAK,SAACC,GAEL,OADAjB,aAAaS,QAAQ,OAAQL,GACtBa,EAASC,UAEjBF,MAAK,SAACG,GAAU,IAAD,EACRC,EAAC,OAAGD,QAAH,IAAGA,GAAH,UAAGA,EAAME,YAAT,aAAG,EAAYC,KAClBC,OAAOC,SAASJ,GAClBb,EAAekB,KAAKC,MAAU,GAAJN,GAAU,IAEpCO,QAAQC,MAAM,0CAGpB,MAAOA,GACPD,QAAQC,MAAM,SAAUA,IAgBxBC,GAEAtB,EAAe,OASX,UACE,uBACEC,UAAU,OACVsB,KAAK,OACLC,MAAO3B,EACP4B,SAvBa,SAACrB,GACxBN,EAAQM,EAAMsB,OAAOF,QAuBXG,YAAY,kCAEd,wBAAQ1B,UAAU,gBAAgBsB,KAAK,SAAvC,gCAKHP,OAAOC,SAASlB,IACf,sBAAKE,UAAU,cAAf,UACGF,EACD,qBAAKE,UAAU,SAAf,4BErEZ2B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e4c03899.chunk.js","sourcesContent":["export const countriesList = ['NL', 'RS', 'US', 'GB', 'FR', 'DE', 'IT', 'PL', 'ES', 'PT'];\n\nexport const countriesNames = {\n  NL: 'Netherlands',\n  RS: 'Serbia',\n  US: 'USA',\n  GB: 'Great Britain',\n  FR: 'France',\n  DE: 'Germany',\n  IT: 'Italy',\n  PL: 'Poland',\n  ES: 'Spain',\n  PT: 'Portugal',\n};\n","import Countries from './Countries';\n\nexport default Countries;\n","import { useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactFlagsSelect from 'react-flags-select';\nimport { countriesList, countriesNames } from './constants';\n\nconst Countries = ({ country, setCountry }) => {\n  const countriesLabels = useMemo(() => {\n    const labels = {};\n\n    countriesList.forEach((code) => {\n      labels[code] = { primary: code, secondary: countriesNames[code] };\n    });\n\n    return labels;\n  }, []);\n\n  return (\n    <ReactFlagsSelect\n      selected={country}\n      countries={countriesList}\n      customLabels={countriesLabels}\n      showOptionLabel={false}\n      showSecondarySelectedLabel={false}\n      fullWidth={false}\n      onSelect={setCountry}\n    />\n  );\n};\n\nCountries.propTypes = {\n  country: PropTypes.string.isRequired,\n  setCountry: PropTypes.func.isRequired,\n};\n\nexport default Countries;\n","import { useState } from 'react';\nimport Countries from './components/Countries';\nimport { defaultCountry } from './constants';\nimport './App.css';\n\nfunction App() {\n  const selectedCountry = localStorage.getItem('country') || defaultCountry;\n  const selectedCity = localStorage.getItem('city') || '';\n\n  const [country, setCountry] = useState(selectedCountry);\n  const [city, setCity] = useState(selectedCity);\n  const [temperature, setTemperature] = useState(null);\n\n  const getWeather = () => {\n    try {\n      const url = `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&units=metric&APPID=${process.env.REACT_APP_APPID}`;\n\n      fetch(url)\n        .then((response) => {\n          localStorage.setItem('city', city);\n          return response.json();\n        })\n        .then((data) => {\n          const t = data?.main?.temp;\n          if (Number.isFinite(t)) {\n            setTemperature(Math.round(t * 10) / 10);\n          } else {\n            console.error('Error while getting the temperature');\n          }\n        });\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n\n  const handleChangeCountry = (code) => {\n    localStorage.setItem('country', code);\n    setCountry(code);\n  };\n\n  const handleChangeCity = (event) => {\n    setCity(event.target.value);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    if (city) {\n      getWeather();\n    } else {\n      setTemperature(null);\n    }\n  };\n\n  return (\n    <div className=\"container main\">\n      <div className=\"container wrapper\">\n        <div className=\"container\">\n          <Countries country={country} setCountry={handleChangeCountry} />\n          <form className=\"form\" onSubmit={handleSubmit}>\n            <input\n              className=\"city\"\n              type=\"text\"\n              value={city}\n              onChange={handleChangeCity}\n              placeholder=\"Please enter your location...\"\n            />\n            <button className=\"submit-button\" type=\"submit\">\n              üîç\n            </button>\n          </form>\n        </div>\n        {Number.isFinite(temperature) && (\n          <div className=\"temperature\">\n            {temperature}\n            <sup className=\"degree\">¬∞C</sup>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","export const defaultCountry = 'NL';\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}